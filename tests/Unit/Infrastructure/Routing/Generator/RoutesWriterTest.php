<?php

declare(strict_types=1);

namespace Tests\Unit\Infrastructure\Routing\Generator;

use App\Infrastructure\Routing\Generator\RouteProvider;
use App\Infrastructure\Routing\Generator\RoutesWriter;
use PHPUnit\Framework\TestCase;

final class RoutesWriterTest extends TestCase
{
    private string $tempFile;
    
    protected function setUp(): void
    {
        $this->tempFile = sys_get_temp_dir() . '/routes_test_' . uniqid() . '.php';
    }
    
    protected function tearDown(): void
    {
        if (file_exists($this->tempFile)) {
            unlink($this->tempFile);
        }
    }
    
    public function testGenerateRoutesFile(): void
    {
        $routes = [
            [
                'method' => 'GET',
                'path' => '/api/v1/test',
                'handler' => 'App\\Application\\Handlers\\TestHandler',
                'operation_id' => 'TestService.TestMethod',
            ],
            [
                'method' => 'POST',
                'path' => '/api/v1/users',
                'handler' => 'App\\Application\\Handlers\\UserHandler',
                'operation_id' => 'UserService.CreateUser',
            ],
        ];
        
        $provider = $this->createMock(RouteProvider::class);
        $provider->method('getRoutes')->willReturn($routes);
        
        $writer = new RoutesWriter($provider, $this->tempFile);
        $writer->generateRoutesFile();
        
        self::assertFileExists($this->tempFile);
        
        $content = file_get_contents($this->tempFile);
        self::assertIsString($content);
        
        self::assertStringContainsString("declare(strict_types=1);", $content);
        self::assertStringContainsString("use App\Application\Handlers\HandlerInterface;", $content);
        self::assertStringContainsString("WARNING: This file is automatically generated", $content);
        
        self::assertStringContainsString("// TestService.TestMethod", $content);
        self::assertStringContainsString("'method' => 'GET'", $content);
        self::assertStringContainsString("'path' => '/api/v1/test'", $content);
        self::assertStringContainsString("'handler' => App\\Application\\Handlers\\TestHandler::class", $content);
        
        self::assertStringContainsString("// UserService.CreateUser", $content);
        self::assertStringContainsString("'method' => 'POST'", $content);
        self::assertStringContainsString("'path' => '/api/v1/users'", $content);
        self::assertStringContainsString("'handler' => App\\Application\\Handlers\\UserHandler::class", $content);
        
        $generatedRoutes = require $this->tempFile;
        self::assertIsArray($generatedRoutes);
        self::assertCount(2, $generatedRoutes);
        
        /** @var array{method: string, path: string, handler: class-string} $route0 */
        $route0 = $generatedRoutes[0];
        self::assertEquals('GET', $route0['method']);
        self::assertEquals('/api/v1/test', $route0['path']);
        self::assertSame('App\\Application\\Handlers\\TestHandler', $route0['handler']);
        
        /** @var array{method: string, path: string, handler: class-string} $route1 */
        $route1 = $generatedRoutes[1];
        self::assertEquals('POST', $route1['method']);
        self::assertEquals('/api/v1/users', $route1['path']);
        self::assertSame('App\\Application\\Handlers\\UserHandler', $route1['handler']);
    }
    
    public function testGenerateRoutesFileWithEmptyRoutes(): void
    {
        $provider = $this->createMock(RouteProvider::class);
        $provider->method('getRoutes')->willReturn([]);
        
        $writer = new RoutesWriter($provider, $this->tempFile);
        $writer->generateRoutesFile();
        
        self::assertFileExists($this->tempFile);
        
        $content = file_get_contents($this->tempFile);
        self::assertIsString($content);
        
        self::assertStringContainsString("return [", $content);
        self::assertStringContainsString("];", $content);
        
        /** @var mixed $generatedRoutes */
        $generatedRoutes = require $this->tempFile;
        self::assertIsArray($generatedRoutes);
        self::assertEmpty($generatedRoutes);
    }
    
    public function testGenerateRoutesFileWithoutOperationId(): void
    {
        $routes = [
            [
                'method' => 'GET',
                'path' => '/api/v1/test',
                'handler' => 'App\\Application\\Handlers\\TestHandler',
                // No operation_id
            ],
        ];
        
        $provider = $this->createMock(RouteProvider::class);
        $provider->method('getRoutes')->willReturn($routes);
        
        $writer = new RoutesWriter($provider, $this->tempFile);
        $writer->generateRoutesFile();
        
        $content = file_get_contents($this->tempFile);
        self::assertIsString($content);
        
        self::assertStringNotContainsString("// ", $content); // No comments for missing operation_id
        self::assertStringContainsString("'method' => 'GET'", $content);
        
        $generatedRoutes = require $this->tempFile;
        self::assertIsArray($generatedRoutes);
        self::assertCount(1, $generatedRoutes);
    }
}