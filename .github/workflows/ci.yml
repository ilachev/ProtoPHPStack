name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  PHP_CS_FIXER_IGNORE_ENV: true
  PHP_CS_FIXER_FUTURE_MODE: true

jobs:
  validate:
    name: Validate and Test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, intl, sqlite3, pdo_sqlite
          coverage: none
          tools: composer:v2
      
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress
      
      - name: Install Taskfile
        uses: arduino/setup-task@v1
        with:
          version: '3.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Debug PHP and environment
        run: |
          php --version
          echo "PHP_CS_FIXER_IGNORE_ENV=$PHP_CS_FIXER_IGNORE_ENV"
          echo "PHP_CS_FIXER_FUTURE_MODE=$PHP_CS_FIXER_FUTURE_MODE"
          php -r "var_dump(get_loaded_extensions());"
          php -r "var_dump(ini_get_all());" | grep -i "memor"
      
      - name: Run verify (tests, lint and static analysis)
        run: task verify
      
# Tests are already included in verify task
  
  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: validate
    env:
      PHP_CS_FIXER_IGNORE_ENV: true
      PHP_CS_FIXER_FUTURE_MODE: true
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, intl, sqlite3
          coverage: none
          tools: composer:v2
      
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-dev
      
      - name: Install Taskfile
        uses: arduino/setup-task@v1
        with:
          version: '3.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
      
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      
      - name: Install protoc-gen-openapiv2
        run: |
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@v2.18.0
          echo "PATH=$PATH:$(go env GOPATH)/bin" >> $GITHUB_ENV
          # Copy plugin to a location where Docker can access it
          sudo cp $(go env GOPATH)/bin/protoc-gen-openapiv2 /usr/local/bin/
      
      - name: Generate proto artifacts
        run: |
          # Create necessary directories
          mkdir -p protos/gen docs
          
          # Run protoc in Docker container
          echo "Generating PHP SDK..."
          docker run --rm -v $(pwd):/workspace -w /workspace bufbuild/buf:1.16.0 \
            protoc -I=/workspace/protos/proto \
            --php_out=/workspace/protos/gen \
            --php_opt=aggregate_metadata \
            /workspace/protos/proto/app/v1/*.proto \
            /workspace/protos/proto/google/api/*.proto
          
          echo "Generating OpenAPI docs..."
          docker run --rm -v $(pwd):/workspace -w /workspace bufbuild/buf:1.16.0 \
            protoc -I=/workspace/protos/proto \
            --openapiv2_out=logtostderr=true:/workspace/docs \
            --openapiv2_opt=json_names_for_fields=true,allow_merge=true,merge_file_name=api \
            /workspace/protos/proto/app/v1/*.proto
          
          echo "Generating routes..."
          php bin/generate-routes.php
          
          # Fix permissions
          sudo chown -R $(id -u):$(id -g) protos/gen docs
      
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-artifacts
          path: |
            docs/
            protos/gen/