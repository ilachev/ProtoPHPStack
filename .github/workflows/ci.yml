name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  PHP_CS_FIXER_IGNORE_ENV: true
  PHP_CS_FIXER_FUTURE_MODE: true

jobs:
  validate:
    name: Validate and Test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, intl, sqlite3, pdo_sqlite
          coverage: none
          tools: composer:v2
      
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress
      
      - name: Install Taskfile
        uses: arduino/setup-task@v1
        with:
          version: '3.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Debug PHP and environment
        run: |
          php --version
          echo "PHP_CS_FIXER_IGNORE_ENV=$PHP_CS_FIXER_IGNORE_ENV"
          echo "PHP_CS_FIXER_FUTURE_MODE=$PHP_CS_FIXER_FUTURE_MODE"
          php -r "var_dump(get_loaded_extensions());"
          php -r "var_dump(ini_get_all());" | grep -i "memor"
      
      - name: Run verify (tests, lint and static analysis)
        run: task verify
      
# Tests are already included in verify task
  
  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: validate
    env:
      PHP_CS_FIXER_IGNORE_ENV: true
      PHP_CS_FIXER_FUTURE_MODE: true
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, intl, sqlite3
          coverage: none
          tools: composer:v2
      
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-dev
      
      - name: Install Taskfile
        uses: arduino/setup-task@v1
        with:
          version: '3.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install Protoc Prebuilt Binary
        run: |
          echo "Installing protobuf compiler from GitHub releases..."
          PROTOC_VERSION="24.4"
          PROTOC_ZIP="protoc-${PROTOC_VERSION}-linux-x86_64.zip"
          
          # Create temporary directory for download
          mkdir -p /tmp/protoc
          
          # Download and extract protoc
          curl -sSL "https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/${PROTOC_ZIP}" -o /tmp/protoc.zip
          unzip -q /tmp/protoc.zip -d /tmp/protoc
          
          # Install to system directories
          sudo cp /tmp/protoc/bin/protoc /usr/local/bin/
          sudo cp -r /tmp/protoc/include/* /usr/local/include/
          
          # Clean up
          rm -rf /tmp/protoc /tmp/protoc.zip
          
          # Verify protoc installation
          protoc --version
      
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      
      - name: Install protoc-gen-openapiv2
        run: |
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@v2.18.0
          echo "PATH=$PATH:$(go env GOPATH)/bin" >> $GITHUB_ENV
          # Copy plugin to a location where Docker can access it
          sudo cp $(go env GOPATH)/bin/protoc-gen-openapiv2 /usr/local/bin/
      
      - name: Generate proto artifacts
        run: |
          # Create necessary directories
          mkdir -p protos/gen docs
          
          # Process files individually
          echo "Generating PHP SDK..."
          
          # Find and process each .proto file individually
          for proto_file in protos/proto/app/v1/*.proto protos/proto/google/api/*.proto; do
            echo "Processing: $proto_file"
            protoc -I=protos/proto \
              --php_out=protos/gen \
              --php_opt=aggregate_metadata \
              "$proto_file"
          done
          
          echo "Generating OpenAPI docs..."
          # Process API files for OpenAPI generation
          for proto_file in protos/proto/app/v1/*.proto; do
            echo "Processing for OpenAPI: $proto_file"
            protoc -I=protos/proto \
              --openapiv2_out=logtostderr=true:docs \
              --openapiv2_opt=json_names_for_fields=true,allow_merge=true,merge_file_name=api \
              "$proto_file"
          done
          
          echo "Generating routes..."
          php bin/generate-routes.php
          
          # Fix permissions if needed
          if [ "$(stat -c %u protos/gen)" != "$(id -u)" ]; then
            sudo chown -R $(id -u):$(id -g) protos/gen docs
          fi
      
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-artifacts
          path: |
            docs/
            protos/gen/