<?php

declare(strict_types=1);

namespace App\Infrastructure\Routing\Generator;

final readonly class RoutesWriter
{
    /**
     * @param RouteProvider $provider Routes provider
     * @param string $outputFile Path to the routes configuration file
     */
    public function __construct(
        private RouteProvider $provider,
        private string $outputFile,
    ) {
    }
    
    public function generateRoutesFile(): void
    {
        $routes = $this->provider->getRoutes();
        $content = $this->generateFileContent($routes);
        
        file_put_contents($this->outputFile, $content);
    }
    
    /**
     * @param array<array{
     *     method: string,
     *     path: string,
     *     handler: string,
     *     operation_id?: string
     * }> $routes
     */
    private function generateFileContent(array $routes): string
    {
        $routesCode = [];
        
        foreach ($routes as $route) {
            $comment = isset($route['operation_id']) ? "    // {$route['operation_id']}\n" : '';
            $routesCode[] = "{$comment}    [
        'method' => '{$route['method']}',
        'path' => '{$route['path']}',
        'handler' => {$route['handler']}::class,
    ]";
        }
        
        $routesStr = implode(",\n", $routesCode);
        
        return <<<PHP
<?php

declare(strict_types=1);

use App\Application\Handlers\HandlerInterface;

/**
 * WARNING: This file is automatically generated
 * from protobuf definitions. Do not edit manually.
 *
 * @return array<array{
 *     method: string,
 *     path: string,
 *     handler: class-string<HandlerInterface>
 * }>
 */
return [
{$routesStr}
];

PHP;
    }
}